ЛР2.

Каждый пукнт - отдельный коммит - это обязательно. Коммиты называются нормально, поля и методы называются нормально.
Диаграмма классов обязательна - без неё работа не принимается


1. Для выбранной сущности реализовать класс "MyEntity"_rep_json, который читает данные из json и выполняет следущие функции
		a. Чтение всех значений из файла;
        b. Запись всех значений в файл;
        c. Получить объект по ID
        d. get_k_n_short_list Получить список k по счету n объектов класса short (например, вторые 20 элементов, чтобы в дальнейшем можно было листать длинный список)
        e. Сортировать элементы по выбранному полю(одно поле, определяете его по предметной области).
        f. Добавить объект в список (при добавлении сформировать новый ID).
        g. Заменить элемент списка по ID.
        h. Удалить элемент списка по ID.
        i. get_count Получить количество элементов
2. Для выбранной сущности реализовать класс "MyEntity"_rep_yaml, который читает данные из yaml и выполняет следущие функции
		a. Чтение всех значений из файла;
        b. Запись всех значений в файл;
        c. Получить объект по ID
        d. get_k_n_short_list Получить список k по счету n объектов класса short (например, вторые 20 элементов, чтобы в дальнейшем можно было листать длинный список)
        e. Сортировать элементы по выбранному полю(одно поле, определяете его по предметной области).
        f. Добавить объект в список (при добавлении сформировать новый ID).
        g. Заменить элемент списка по ID.
        h. Удалить элемент списка по ID.
        i. get_count Получить количество элементов
3. С помощью наследования объединить два написанных класса в общую иерархию - построить диаграмму классов
4. Для выбранной сущности реализовать класс "MyEntity"_rep_DB, который читает данные из database - НЕЛЬЗЯ ФРЕЙМВОРКИ (ТОЛЬКО ЗАПРОСЫ) - НЕЛЬЗЯ SQLLite и выполняет следущие функции
        a. Получить объект по ID
        b. get_k_n_short_list Получить список k по счету n объектов класса short (например, вторые 20 элементов, чтобы в дальнейшем можно было листать длинный список)
        c. Добавить объект в список (при добавлении сформировать новый ID).
        d. Заменить элемент списка по ID.
        e. Удалить элемент списка по ID.
        f. get_count Получить количество элементов
5. Выделите с помощью делегации и паттерна одиночка отдельный класс для работы с выбранной БД
6. С помощью паттерна Адаптер внести указанный класс в уже построенную иерархию, построить диаграмму классов
7. * - с помощью паттерна Декоратор реализовать возможность передачи фильтра и способа сортировки в методы get_k_n_short_list и get_count для класса работы с БД
8. ** - с помощью паттерна Декоратор реализовать возможность передачи фильтра и способа сортировки в методы get_k_n_short_list и get_count для класса работы с файлами.

Теоретические вопросы.
        a. Опишите, как Вы понимаете утверждение – Используйте делегацию вместо наследования, напишите на бумаге тривиальный пример.
        b. Что такое отношение ассоциации в ОПП? Покажите разновидности ассоциации.
        c. Опишите проблему и место применения паттерна стратегия, как пример делегации.
        d. Напишите на бумаге или на доске тривиальный пример наследования и реализации паттерна стратегия, объясните разницу.
        e. Приведите пример ситуации, когда нет необходимости в применении паттерна
        f. Какой класс отвечает за работу с БД? Как осуществляется работа?
        g. В каком формате объект указанного Вами класса возвращает результат SQL запроса Select?
        h. Опишите проблему и место паттерна одиночка в разработке.
        i. Напишите на бумаге пример реализации данного паттерна и способ проверки корректности его работы.
        j. Попытайтесь снова сформулировать ответ на вопрос – В чем необходимость использования полей и методов класса? Приведите два практических примера, когда введение метода класса вы считаете необходимым согласно концепциям ООП.